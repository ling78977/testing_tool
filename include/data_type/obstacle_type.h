/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to C Translator
  File name: include/data_type/obstacle_type.h
  Source: /home/ling/projects/dds_sub/idl/obstacle_type.idl
  Cyclone DDS: V0.11.0

*****************************************************************/
#ifndef MYPROJ_INCLUDE_DATA_TYPE_OBSTACLE_TYPE_H_2DE382DBCB1B280229B89EA847883512
#define MYPROJ_INCLUDE_DATA_TYPE_OBSTACLE_TYPE_H_2DE382DBCB1B280229B89EA847883512

#include "dds/ddsc/dds_public_impl.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef struct obstacle_point_t
{
  float x;
  float y;
} obstacle_point_t;

extern const dds_topic_descriptor_t obstacle_point_t_desc;

#define obstacle_point_t__alloc() \
((obstacle_point_t*) dds_alloc (sizeof (obstacle_point_t)));

#define obstacle_point_t_free(d,o) \
dds_sample_free ((d), &obstacle_point_t_desc, (o))

typedef struct obstacle_t
{
  uint8_t label;
  int32_t num;
  struct obstacle_point_t points[1000];
} obstacle_t;

extern const dds_topic_descriptor_t obstacle_t_desc;

#define obstacle_t__alloc() \
((obstacle_t*) dds_alloc (sizeof (obstacle_t)));

#define obstacle_t_free(d,o) \
dds_sample_free ((d), &obstacle_t_desc, (o))

typedef struct obstacle_s_t
{
  uint8_t status;
  int32_t num;
  struct obstacle_t obstacles[100];
  double timestamp;
} obstacle_s_t;

extern const dds_topic_descriptor_t obstacle_s_t_desc;

#define obstacle_s_t__alloc() \
((obstacle_s_t*) dds_alloc (sizeof (obstacle_s_t)));

#define obstacle_s_t_free(d,o) \
dds_sample_free ((d), &obstacle_s_t_desc, (o))

typedef struct obstacle_statistics_t
{
  float mean;
  float var;
} obstacle_statistics_t;

extern const dds_topic_descriptor_t obstacle_statistics_t_desc;

#define obstacle_statistics_t__alloc() \
((obstacle_statistics_t*) dds_alloc (sizeof (obstacle_statistics_t)));

#define obstacle_statistics_t_free(d,o) \
dds_sample_free ((d), &obstacle_statistics_t_desc, (o))

typedef struct obstacle_statistics_s_t
{
  double timestamp;
  int32_t num;
  struct obstacle_statistics_t statistics[20];
} obstacle_statistics_s_t;

extern const dds_topic_descriptor_t obstacle_statistics_s_t_desc;

#define obstacle_statistics_s_t__alloc() \
((obstacle_statistics_s_t*) dds_alloc (sizeof (obstacle_statistics_s_t)));

#define obstacle_statistics_s_t_free(d,o) \
dds_sample_free ((d), &obstacle_statistics_s_t_desc, (o))

typedef struct obstacle_point_visualization_t
{
  int8_t x;
  int8_t y;
} obstacle_point_visualization_t;

extern const dds_topic_descriptor_t obstacle_point_visualization_t_desc;

#define obstacle_point_visualization_t__alloc() \
((obstacle_point_visualization_t*) dds_alloc (sizeof (obstacle_point_visualization_t)));

#define obstacle_point_visualization_t_free(d,o) \
dds_sample_free ((d), &obstacle_point_visualization_t_desc, (o))

typedef struct obstacle_visualization_t
{
  uint8_t label;
  int32_t num;
  struct obstacle_point_visualization_t points[200];
} obstacle_visualization_t;

extern const dds_topic_descriptor_t obstacle_visualization_t_desc;

#define obstacle_visualization_t__alloc() \
((obstacle_visualization_t*) dds_alloc (sizeof (obstacle_visualization_t)));

#define obstacle_visualization_t_free(d,o) \
dds_sample_free ((d), &obstacle_visualization_t_desc, (o))

typedef struct obstacles_visualization_t
{
  uint8_t status;
  int32_t num;
  struct obstacle_visualization_t obstacles[20];
  double timestamp;
  float scale;
} obstacles_visualization_t;

extern const dds_topic_descriptor_t obstacles_visualization_t_desc;

#define obstacles_visualization_t__alloc() \
((obstacles_visualization_t*) dds_alloc (sizeof (obstacles_visualization_t)));

#define obstacles_visualization_t_free(d,o) \
dds_sample_free ((d), &obstacles_visualization_t_desc, (o))

typedef struct boundary_t
{
  uint8_t label;
  int32_t num;
  struct obstacle_point_t points[2000];
} boundary_t;

extern const dds_topic_descriptor_t boundary_t_desc;

#define boundary_t__alloc() \
((boundary_t*) dds_alloc (sizeof (boundary_t)));

#define boundary_t_free(d,o) \
dds_sample_free ((d), &boundary_t_desc, (o))

typedef struct boundaries_t
{
  uint8_t status;
  int32_t num;
  struct boundary_t boundaries[50];
  double timestamp;
} boundaries_t;

extern const dds_topic_descriptor_t boundaries_t_desc;

#define boundaries_t__alloc() \
((boundaries_t*) dds_alloc (sizeof (boundaries_t)));

#define boundaries_t_free(d,o) \
dds_sample_free ((d), &boundaries_t_desc, (o))

#ifdef __cplusplus
}
#endif

#endif /* MYPROJ_INCLUDE_DATA_TYPE_OBSTACLE_TYPE_H_2DE382DBCB1B280229B89EA847883512 */
