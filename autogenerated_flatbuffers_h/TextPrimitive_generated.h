// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEXTPRIMITIVE_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_TEXTPRIMITIVE_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "Color_generated.h"
#include "Pose_generated.h"

namespace foxglove {

struct TextPrimitive;
struct TextPrimitiveBuilder;

/// A primitive representing a text label
struct TextPrimitive FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TextPrimitiveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSE = 4,
    VT_BILLBOARD = 6,
    VT_FONT_SIZE = 8,
    VT_SCALE_INVARIANT = 10,
    VT_COLOR = 12,
    VT_TEXT = 14
  };
  /// Position of the center of the text box and orientation of the text. Identity orientation means the text is oriented in the xy-plane and flows from -x to +x.
  const foxglove::Pose *pose() const {
    return GetPointer<const foxglove::Pose *>(VT_POSE);
  }
  foxglove::Pose *mutable_pose() {
    return GetPointer<foxglove::Pose *>(VT_POSE);
  }
  /// Whether the text should respect `pose.orientation` (false) or always face the camera (true)
  bool billboard() const {
    return GetField<uint8_t>(VT_BILLBOARD, 0) != 0;
  }
  bool mutate_billboard(bool _billboard = 0) {
    return SetField<uint8_t>(VT_BILLBOARD, static_cast<uint8_t>(_billboard), 0);
  }
  /// Font size (height of one line of text)
  double font_size() const {
    return GetField<double>(VT_FONT_SIZE, 0.0);
  }
  bool mutate_font_size(double _font_size = 0.0) {
    return SetField<double>(VT_FONT_SIZE, _font_size, 0.0);
  }
  /// Indicates whether `font_size` is a fixed size in screen pixels (true), or specified in world coordinates and scales with distance from the camera (false)
  bool scale_invariant() const {
    return GetField<uint8_t>(VT_SCALE_INVARIANT, 0) != 0;
  }
  bool mutate_scale_invariant(bool _scale_invariant = 0) {
    return SetField<uint8_t>(VT_SCALE_INVARIANT, static_cast<uint8_t>(_scale_invariant), 0);
  }
  /// Color of the text
  const foxglove::Color *color() const {
    return GetPointer<const foxglove::Color *>(VT_COLOR);
  }
  foxglove::Color *mutable_color() {
    return GetPointer<foxglove::Color *>(VT_COLOR);
  }
  /// Text
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  ::flatbuffers::String *mutable_text() {
    return GetPointer<::flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyField<uint8_t>(verifier, VT_BILLBOARD, 1) &&
           VerifyField<double>(verifier, VT_FONT_SIZE, 8) &&
           VerifyField<uint8_t>(verifier, VT_SCALE_INVARIANT, 1) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyTable(color()) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct TextPrimitiveBuilder {
  typedef TextPrimitive Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pose(::flatbuffers::Offset<foxglove::Pose> pose) {
    fbb_.AddOffset(TextPrimitive::VT_POSE, pose);
  }
  void add_billboard(bool billboard) {
    fbb_.AddElement<uint8_t>(TextPrimitive::VT_BILLBOARD, static_cast<uint8_t>(billboard), 0);
  }
  void add_font_size(double font_size) {
    fbb_.AddElement<double>(TextPrimitive::VT_FONT_SIZE, font_size, 0.0);
  }
  void add_scale_invariant(bool scale_invariant) {
    fbb_.AddElement<uint8_t>(TextPrimitive::VT_SCALE_INVARIANT, static_cast<uint8_t>(scale_invariant), 0);
  }
  void add_color(::flatbuffers::Offset<foxglove::Color> color) {
    fbb_.AddOffset(TextPrimitive::VT_COLOR, color);
  }
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(TextPrimitive::VT_TEXT, text);
  }
  explicit TextPrimitiveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TextPrimitive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TextPrimitive>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TextPrimitive> CreateTextPrimitive(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    bool billboard = false,
    double font_size = 0.0,
    bool scale_invariant = false,
    ::flatbuffers::Offset<foxglove::Color> color = 0,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0) {
  TextPrimitiveBuilder builder_(_fbb);
  builder_.add_font_size(font_size);
  builder_.add_text(text);
  builder_.add_color(color);
  builder_.add_pose(pose);
  builder_.add_scale_invariant(scale_invariant);
  builder_.add_billboard(billboard);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TextPrimitive> CreateTextPrimitiveDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    bool billboard = false,
    double font_size = 0.0,
    bool scale_invariant = false,
    ::flatbuffers::Offset<foxglove::Color> color = 0,
    const char *text = nullptr) {
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return foxglove::CreateTextPrimitive(
      _fbb,
      pose,
      billboard,
      font_size,
      scale_invariant,
      color,
      text__);
}

inline const foxglove::TextPrimitive *GetTextPrimitive(const void *buf) {
  return ::flatbuffers::GetRoot<foxglove::TextPrimitive>(buf);
}

inline const foxglove::TextPrimitive *GetSizePrefixedTextPrimitive(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<foxglove::TextPrimitive>(buf);
}

inline TextPrimitive *GetMutableTextPrimitive(void *buf) {
  return ::flatbuffers::GetMutableRoot<TextPrimitive>(buf);
}

inline foxglove::TextPrimitive *GetMutableSizePrefixedTextPrimitive(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<foxglove::TextPrimitive>(buf);
}

inline bool VerifyTextPrimitiveBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::TextPrimitive>(nullptr);
}

inline bool VerifySizePrefixedTextPrimitiveBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::TextPrimitive>(nullptr);
}

inline void FinishTextPrimitiveBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::TextPrimitive> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTextPrimitiveBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::TextPrimitive> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_TEXTPRIMITIVE_FOXGLOVE_H_
