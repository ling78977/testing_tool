// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POINTCLOUD_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_POINTCLOUD_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "PackedElementField_generated.h"
#include "Pose_generated.h"
#include "Time_generated.h"

namespace foxglove {

struct PointCloud;
struct PointCloudBuilder;

/// A collection of N-dimensional points, which may contain additional fields with information like normals, intensity, etc.
struct PointCloud FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PointCloudBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_FRAME_ID = 6,
    VT_POSE = 8,
    VT_POINT_STRIDE = 10,
    VT_FIELDS = 12,
    VT_DATA = 14
  };
  /// Timestamp of point cloud
  const foxglove::Time *timestamp() const {
    return GetStruct<const foxglove::Time *>(VT_TIMESTAMP);
  }
  foxglove::Time *mutable_timestamp() {
    return GetStruct<foxglove::Time *>(VT_TIMESTAMP);
  }
  /// Frame of reference
  const ::flatbuffers::String *frame_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FRAME_ID);
  }
  ::flatbuffers::String *mutable_frame_id() {
    return GetPointer<::flatbuffers::String *>(VT_FRAME_ID);
  }
  /// The origin of the point cloud relative to the frame of reference
  const foxglove::Pose *pose() const {
    return GetPointer<const foxglove::Pose *>(VT_POSE);
  }
  foxglove::Pose *mutable_pose() {
    return GetPointer<foxglove::Pose *>(VT_POSE);
  }
  /// Number of bytes between points in the `data`
  uint32_t point_stride() const {
    return GetField<uint32_t>(VT_POINT_STRIDE, 0);
  }
  bool mutate_point_stride(uint32_t _point_stride = 0) {
    return SetField<uint32_t>(VT_POINT_STRIDE, _point_stride, 0);
  }
  /// Fields in `data`. At least 2 coordinate fields from `x`, `y`, and `z` are required for each point's position; `red`, `green`, `blue`, and `alpha` are optional for customizing each point's color.
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::PackedElementField>> *fields() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::PackedElementField>> *>(VT_FIELDS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::PackedElementField>> *mutable_fields() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::PackedElementField>> *>(VT_FIELDS);
  }
  /// Point data, interpreted using `fields`
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  ::flatbuffers::Vector<uint8_t> *mutable_data() {
    return GetPointer<::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<foxglove::Time>(verifier, VT_TIMESTAMP, 4) &&
           VerifyOffset(verifier, VT_FRAME_ID) &&
           verifier.VerifyString(frame_id()) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyField<uint32_t>(verifier, VT_POINT_STRIDE, 4) &&
           VerifyOffset(verifier, VT_FIELDS) &&
           verifier.VerifyVector(fields()) &&
           verifier.VerifyVectorOfTables(fields()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct PointCloudBuilder {
  typedef PointCloud Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_timestamp(const foxglove::Time *timestamp) {
    fbb_.AddStruct(PointCloud::VT_TIMESTAMP, timestamp);
  }
  void add_frame_id(::flatbuffers::Offset<::flatbuffers::String> frame_id) {
    fbb_.AddOffset(PointCloud::VT_FRAME_ID, frame_id);
  }
  void add_pose(::flatbuffers::Offset<foxglove::Pose> pose) {
    fbb_.AddOffset(PointCloud::VT_POSE, pose);
  }
  void add_point_stride(uint32_t point_stride) {
    fbb_.AddElement<uint32_t>(PointCloud::VT_POINT_STRIDE, point_stride, 0);
  }
  void add_fields(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::PackedElementField>>> fields) {
    fbb_.AddOffset(PointCloud::VT_FIELDS, fields);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(PointCloud::VT_DATA, data);
  }
  explicit PointCloudBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PointCloud> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PointCloud>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PointCloud> CreatePointCloud(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const foxglove::Time *timestamp = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> frame_id = 0,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    uint32_t point_stride = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::PackedElementField>>> fields = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  PointCloudBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_fields(fields);
  builder_.add_point_stride(point_stride);
  builder_.add_pose(pose);
  builder_.add_frame_id(frame_id);
  builder_.add_timestamp(timestamp);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PointCloud> CreatePointCloudDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const foxglove::Time *timestamp = nullptr,
    const char *frame_id = nullptr,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    uint32_t point_stride = 0,
    const std::vector<::flatbuffers::Offset<foxglove::PackedElementField>> *fields = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  auto frame_id__ = frame_id ? _fbb.CreateString(frame_id) : 0;
  auto fields__ = fields ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::PackedElementField>>(*fields) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return foxglove::CreatePointCloud(
      _fbb,
      timestamp,
      frame_id__,
      pose,
      point_stride,
      fields__,
      data__);
}

inline const foxglove::PointCloud *GetPointCloud(const void *buf) {
  return ::flatbuffers::GetRoot<foxglove::PointCloud>(buf);
}

inline const foxglove::PointCloud *GetSizePrefixedPointCloud(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<foxglove::PointCloud>(buf);
}

inline PointCloud *GetMutablePointCloud(void *buf) {
  return ::flatbuffers::GetMutableRoot<PointCloud>(buf);
}

inline foxglove::PointCloud *GetMutableSizePrefixedPointCloud(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<foxglove::PointCloud>(buf);
}

inline bool VerifyPointCloudBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::PointCloud>(nullptr);
}

inline bool VerifySizePrefixedPointCloudBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::PointCloud>(nullptr);
}

inline void FinishPointCloudBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::PointCloud> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPointCloudBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::PointCloud> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_POINTCLOUD_FOXGLOVE_H_
