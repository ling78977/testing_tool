// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POSESINFRAME_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_POSESINFRAME_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "Pose_generated.h"
#include "Time_generated.h"

namespace foxglove {

struct PosesInFrame;
struct PosesInFrameBuilder;

/// An array of timestamped poses for an object or reference frame in 3D space
struct PosesInFrame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PosesInFrameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_FRAME_ID = 6,
    VT_POSES = 8
  };
  /// Timestamp of pose
  const foxglove::Time *timestamp() const {
    return GetStruct<const foxglove::Time *>(VT_TIMESTAMP);
  }
  foxglove::Time *mutable_timestamp() {
    return GetStruct<foxglove::Time *>(VT_TIMESTAMP);
  }
  /// Frame of reference for pose position and orientation
  const ::flatbuffers::String *frame_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FRAME_ID);
  }
  ::flatbuffers::String *mutable_frame_id() {
    return GetPointer<::flatbuffers::String *>(VT_FRAME_ID);
  }
  /// Poses in 3D space
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Pose>> *poses() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Pose>> *>(VT_POSES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Pose>> *mutable_poses() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Pose>> *>(VT_POSES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<foxglove::Time>(verifier, VT_TIMESTAMP, 4) &&
           VerifyOffset(verifier, VT_FRAME_ID) &&
           verifier.VerifyString(frame_id()) &&
           VerifyOffset(verifier, VT_POSES) &&
           verifier.VerifyVector(poses()) &&
           verifier.VerifyVectorOfTables(poses()) &&
           verifier.EndTable();
  }
};

struct PosesInFrameBuilder {
  typedef PosesInFrame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_timestamp(const foxglove::Time *timestamp) {
    fbb_.AddStruct(PosesInFrame::VT_TIMESTAMP, timestamp);
  }
  void add_frame_id(::flatbuffers::Offset<::flatbuffers::String> frame_id) {
    fbb_.AddOffset(PosesInFrame::VT_FRAME_ID, frame_id);
  }
  void add_poses(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Pose>>> poses) {
    fbb_.AddOffset(PosesInFrame::VT_POSES, poses);
  }
  explicit PosesInFrameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PosesInFrame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PosesInFrame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PosesInFrame> CreatePosesInFrame(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const foxglove::Time *timestamp = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> frame_id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Pose>>> poses = 0) {
  PosesInFrameBuilder builder_(_fbb);
  builder_.add_poses(poses);
  builder_.add_frame_id(frame_id);
  builder_.add_timestamp(timestamp);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PosesInFrame> CreatePosesInFrameDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const foxglove::Time *timestamp = nullptr,
    const char *frame_id = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::Pose>> *poses = nullptr) {
  auto frame_id__ = frame_id ? _fbb.CreateString(frame_id) : 0;
  auto poses__ = poses ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::Pose>>(*poses) : 0;
  return foxglove::CreatePosesInFrame(
      _fbb,
      timestamp,
      frame_id__,
      poses__);
}

inline const foxglove::PosesInFrame *GetPosesInFrame(const void *buf) {
  return ::flatbuffers::GetRoot<foxglove::PosesInFrame>(buf);
}

inline const foxglove::PosesInFrame *GetSizePrefixedPosesInFrame(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<foxglove::PosesInFrame>(buf);
}

inline PosesInFrame *GetMutablePosesInFrame(void *buf) {
  return ::flatbuffers::GetMutableRoot<PosesInFrame>(buf);
}

inline foxglove::PosesInFrame *GetMutableSizePrefixedPosesInFrame(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<foxglove::PosesInFrame>(buf);
}

inline bool VerifyPosesInFrameBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::PosesInFrame>(nullptr);
}

inline bool VerifySizePrefixedPosesInFrameBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::PosesInFrame>(nullptr);
}

inline void FinishPosesInFrameBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::PosesInFrame> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPosesInFrameBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::PosesInFrame> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_POSESINFRAME_FOXGLOVE_H_
