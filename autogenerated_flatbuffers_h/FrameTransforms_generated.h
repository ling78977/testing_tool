// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FRAMETRANSFORMS_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_FRAMETRANSFORMS_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "FrameTransform_generated.h"

namespace foxglove {

struct FrameTransforms;
struct FrameTransformsBuilder;

/// An array of FrameTransform messages
struct FrameTransforms FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FrameTransformsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TRANSFORMS = 4
  };
  /// Array of transforms
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::FrameTransform>> *transforms() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::FrameTransform>> *>(VT_TRANSFORMS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::FrameTransform>> *mutable_transforms() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::FrameTransform>> *>(VT_TRANSFORMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TRANSFORMS) &&
           verifier.VerifyVector(transforms()) &&
           verifier.VerifyVectorOfTables(transforms()) &&
           verifier.EndTable();
  }
};

struct FrameTransformsBuilder {
  typedef FrameTransforms Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_transforms(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::FrameTransform>>> transforms) {
    fbb_.AddOffset(FrameTransforms::VT_TRANSFORMS, transforms);
  }
  explicit FrameTransformsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FrameTransforms> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FrameTransforms>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FrameTransforms> CreateFrameTransforms(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::FrameTransform>>> transforms = 0) {
  FrameTransformsBuilder builder_(_fbb);
  builder_.add_transforms(transforms);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FrameTransforms> CreateFrameTransformsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<foxglove::FrameTransform>> *transforms = nullptr) {
  auto transforms__ = transforms ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::FrameTransform>>(*transforms) : 0;
  return foxglove::CreateFrameTransforms(
      _fbb,
      transforms__);
}

inline const foxglove::FrameTransforms *GetFrameTransforms(const void *buf) {
  return ::flatbuffers::GetRoot<foxglove::FrameTransforms>(buf);
}

inline const foxglove::FrameTransforms *GetSizePrefixedFrameTransforms(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<foxglove::FrameTransforms>(buf);
}

inline FrameTransforms *GetMutableFrameTransforms(void *buf) {
  return ::flatbuffers::GetMutableRoot<FrameTransforms>(buf);
}

inline foxglove::FrameTransforms *GetMutableSizePrefixedFrameTransforms(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<foxglove::FrameTransforms>(buf);
}

inline bool VerifyFrameTransformsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::FrameTransforms>(nullptr);
}

inline bool VerifySizePrefixedFrameTransformsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::FrameTransforms>(nullptr);
}

inline void FinishFrameTransformsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::FrameTransforms> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFrameTransformsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::FrameTransforms> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_FRAMETRANSFORMS_FOXGLOVE_H_
