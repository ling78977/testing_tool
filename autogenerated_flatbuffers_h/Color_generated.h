// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COLOR_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_COLOR_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace foxglove {

struct Color;
struct ColorBuilder;

/// A color in RGBA format
struct Color FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ColorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_R = 4,
    VT_G = 6,
    VT_B = 8,
    VT_A = 10
  };
  /// Red value between 0 and 1
  double r() const {
    return GetField<double>(VT_R, 1.0);
  }
  bool mutate_r(double _r = 1.0) {
    return SetField<double>(VT_R, _r, 1.0);
  }
  /// Green value between 0 and 1
  double g() const {
    return GetField<double>(VT_G, 1.0);
  }
  bool mutate_g(double _g = 1.0) {
    return SetField<double>(VT_G, _g, 1.0);
  }
  /// Blue value between 0 and 1
  double b() const {
    return GetField<double>(VT_B, 1.0);
  }
  bool mutate_b(double _b = 1.0) {
    return SetField<double>(VT_B, _b, 1.0);
  }
  /// Alpha value between 0 and 1
  double a() const {
    return GetField<double>(VT_A, 1.0);
  }
  bool mutate_a(double _a = 1.0) {
    return SetField<double>(VT_A, _a, 1.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_R, 8) &&
           VerifyField<double>(verifier, VT_G, 8) &&
           VerifyField<double>(verifier, VT_B, 8) &&
           VerifyField<double>(verifier, VT_A, 8) &&
           verifier.EndTable();
  }
};

struct ColorBuilder {
  typedef Color Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_r(double r) {
    fbb_.AddElement<double>(Color::VT_R, r, 1.0);
  }
  void add_g(double g) {
    fbb_.AddElement<double>(Color::VT_G, g, 1.0);
  }
  void add_b(double b) {
    fbb_.AddElement<double>(Color::VT_B, b, 1.0);
  }
  void add_a(double a) {
    fbb_.AddElement<double>(Color::VT_A, a, 1.0);
  }
  explicit ColorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Color> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Color>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Color> CreateColor(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double r = 1.0,
    double g = 1.0,
    double b = 1.0,
    double a = 1.0) {
  ColorBuilder builder_(_fbb);
  builder_.add_a(a);
  builder_.add_b(b);
  builder_.add_g(g);
  builder_.add_r(r);
  return builder_.Finish();
}

inline const foxglove::Color *GetColor(const void *buf) {
  return ::flatbuffers::GetRoot<foxglove::Color>(buf);
}

inline const foxglove::Color *GetSizePrefixedColor(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<foxglove::Color>(buf);
}

inline Color *GetMutableColor(void *buf) {
  return ::flatbuffers::GetMutableRoot<Color>(buf);
}

inline foxglove::Color *GetMutableSizePrefixedColor(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<foxglove::Color>(buf);
}

inline bool VerifyColorBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::Color>(nullptr);
}

inline bool VerifySizePrefixedColorBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::Color>(nullptr);
}

inline void FinishColorBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::Color> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedColorBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::Color> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_COLOR_FOXGLOVE_H_
