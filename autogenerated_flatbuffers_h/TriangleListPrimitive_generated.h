// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRIANGLELISTPRIMITIVE_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_TRIANGLELISTPRIMITIVE_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "Color_generated.h"
#include "Point3_generated.h"
#include "Pose_generated.h"

namespace foxglove {

struct TriangleListPrimitive;
struct TriangleListPrimitiveBuilder;

/// A primitive representing a set of triangles or a surface tiled by triangles
struct TriangleListPrimitive FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TriangleListPrimitiveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSE = 4,
    VT_POINTS = 6,
    VT_COLOR = 8,
    VT_COLORS = 10,
    VT_INDICES = 12
  };
  /// Origin of triangles relative to reference frame
  const foxglove::Pose *pose() const {
    return GetPointer<const foxglove::Pose *>(VT_POSE);
  }
  foxglove::Pose *mutable_pose() {
    return GetPointer<foxglove::Pose *>(VT_POSE);
  }
  /// Vertices to use for triangles, interpreted as a list of triples (0-1-2, 3-4-5, ...)
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Point3>> *points() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Point3>> *>(VT_POINTS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Point3>> *mutable_points() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Point3>> *>(VT_POINTS);
  }
  /// Solid color to use for the whole shape. One of `color` or `colors` must be provided.
  const foxglove::Color *color() const {
    return GetPointer<const foxglove::Color *>(VT_COLOR);
  }
  foxglove::Color *mutable_color() {
    return GetPointer<foxglove::Color *>(VT_COLOR);
  }
  /// Per-vertex colors (if specified, must have the same length as `points`). One of `color` or `colors` must be provided.
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Color>> *colors() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Color>> *>(VT_COLORS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Color>> *mutable_colors() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Color>> *>(VT_COLORS);
  }
  /// Indices into the `points` and `colors` attribute arrays, which can be used to avoid duplicating attribute data.
  /// 
  /// If omitted or empty, indexing will not be used. This default behavior is equivalent to specifying [0, 1, ..., N-1] for the indices (where N is the number of `points` provided).
  const ::flatbuffers::Vector<uint32_t> *indices() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_INDICES);
  }
  ::flatbuffers::Vector<uint32_t> *mutable_indices() {
    return GetPointer<::flatbuffers::Vector<uint32_t> *>(VT_INDICES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyOffset(verifier, VT_POINTS) &&
           verifier.VerifyVector(points()) &&
           verifier.VerifyVectorOfTables(points()) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyTable(color()) &&
           VerifyOffset(verifier, VT_COLORS) &&
           verifier.VerifyVector(colors()) &&
           verifier.VerifyVectorOfTables(colors()) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           verifier.EndTable();
  }
};

struct TriangleListPrimitiveBuilder {
  typedef TriangleListPrimitive Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pose(::flatbuffers::Offset<foxglove::Pose> pose) {
    fbb_.AddOffset(TriangleListPrimitive::VT_POSE, pose);
  }
  void add_points(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Point3>>> points) {
    fbb_.AddOffset(TriangleListPrimitive::VT_POINTS, points);
  }
  void add_color(::flatbuffers::Offset<foxglove::Color> color) {
    fbb_.AddOffset(TriangleListPrimitive::VT_COLOR, color);
  }
  void add_colors(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Color>>> colors) {
    fbb_.AddOffset(TriangleListPrimitive::VT_COLORS, colors);
  }
  void add_indices(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices) {
    fbb_.AddOffset(TriangleListPrimitive::VT_INDICES, indices);
  }
  explicit TriangleListPrimitiveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TriangleListPrimitive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TriangleListPrimitive>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TriangleListPrimitive> CreateTriangleListPrimitive(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Point3>>> points = 0,
    ::flatbuffers::Offset<foxglove::Color> color = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::Color>>> colors = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices = 0) {
  TriangleListPrimitiveBuilder builder_(_fbb);
  builder_.add_indices(indices);
  builder_.add_colors(colors);
  builder_.add_color(color);
  builder_.add_points(points);
  builder_.add_pose(pose);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TriangleListPrimitive> CreateTriangleListPrimitiveDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    const std::vector<::flatbuffers::Offset<foxglove::Point3>> *points = nullptr,
    ::flatbuffers::Offset<foxglove::Color> color = 0,
    const std::vector<::flatbuffers::Offset<foxglove::Color>> *colors = nullptr,
    const std::vector<uint32_t> *indices = nullptr) {
  auto points__ = points ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::Point3>>(*points) : 0;
  auto colors__ = colors ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::Color>>(*colors) : 0;
  auto indices__ = indices ? _fbb.CreateVector<uint32_t>(*indices) : 0;
  return foxglove::CreateTriangleListPrimitive(
      _fbb,
      pose,
      points__,
      color,
      colors__,
      indices__);
}

inline const foxglove::TriangleListPrimitive *GetTriangleListPrimitive(const void *buf) {
  return ::flatbuffers::GetRoot<foxglove::TriangleListPrimitive>(buf);
}

inline const foxglove::TriangleListPrimitive *GetSizePrefixedTriangleListPrimitive(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<foxglove::TriangleListPrimitive>(buf);
}

inline TriangleListPrimitive *GetMutableTriangleListPrimitive(void *buf) {
  return ::flatbuffers::GetMutableRoot<TriangleListPrimitive>(buf);
}

inline foxglove::TriangleListPrimitive *GetMutableSizePrefixedTriangleListPrimitive(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<foxglove::TriangleListPrimitive>(buf);
}

inline bool VerifyTriangleListPrimitiveBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::TriangleListPrimitive>(nullptr);
}

inline bool VerifySizePrefixedTriangleListPrimitiveBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::TriangleListPrimitive>(nullptr);
}

inline void FinishTriangleListPrimitiveBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::TriangleListPrimitive> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTriangleListPrimitiveBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::TriangleListPrimitive> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_TRIANGLELISTPRIMITIVE_FOXGLOVE_H_
