// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CIRCLEANNOTATION_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_CIRCLEANNOTATION_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "Color_generated.h"
#include "Point2_generated.h"
#include "Time_generated.h"

namespace foxglove {

struct CircleAnnotation;
struct CircleAnnotationBuilder;

/// A circle annotation on a 2D image
struct CircleAnnotation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CircleAnnotationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_POSITION = 6,
    VT_DIAMETER = 8,
    VT_THICKNESS = 10,
    VT_FILL_COLOR = 12,
    VT_OUTLINE_COLOR = 14
  };
  /// Timestamp of circle
  const foxglove::Time *timestamp() const {
    return GetStruct<const foxglove::Time *>(VT_TIMESTAMP);
  }
  foxglove::Time *mutable_timestamp() {
    return GetStruct<foxglove::Time *>(VT_TIMESTAMP);
  }
  /// Center of the circle in 2D image coordinates (pixels)
  const foxglove::Point2 *position() const {
    return GetPointer<const foxglove::Point2 *>(VT_POSITION);
  }
  foxglove::Point2 *mutable_position() {
    return GetPointer<foxglove::Point2 *>(VT_POSITION);
  }
  /// Circle diameter in pixels
  double diameter() const {
    return GetField<double>(VT_DIAMETER, 0.0);
  }
  bool mutate_diameter(double _diameter = 0.0) {
    return SetField<double>(VT_DIAMETER, _diameter, 0.0);
  }
  /// Line thickness in pixels
  double thickness() const {
    return GetField<double>(VT_THICKNESS, 0.0);
  }
  bool mutate_thickness(double _thickness = 0.0) {
    return SetField<double>(VT_THICKNESS, _thickness, 0.0);
  }
  /// Fill color
  const foxglove::Color *fill_color() const {
    return GetPointer<const foxglove::Color *>(VT_FILL_COLOR);
  }
  foxglove::Color *mutable_fill_color() {
    return GetPointer<foxglove::Color *>(VT_FILL_COLOR);
  }
  /// Outline color
  const foxglove::Color *outline_color() const {
    return GetPointer<const foxglove::Color *>(VT_OUTLINE_COLOR);
  }
  foxglove::Color *mutable_outline_color() {
    return GetPointer<foxglove::Color *>(VT_OUTLINE_COLOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<foxglove::Time>(verifier, VT_TIMESTAMP, 4) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyField<double>(verifier, VT_DIAMETER, 8) &&
           VerifyField<double>(verifier, VT_THICKNESS, 8) &&
           VerifyOffset(verifier, VT_FILL_COLOR) &&
           verifier.VerifyTable(fill_color()) &&
           VerifyOffset(verifier, VT_OUTLINE_COLOR) &&
           verifier.VerifyTable(outline_color()) &&
           verifier.EndTable();
  }
};

struct CircleAnnotationBuilder {
  typedef CircleAnnotation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_timestamp(const foxglove::Time *timestamp) {
    fbb_.AddStruct(CircleAnnotation::VT_TIMESTAMP, timestamp);
  }
  void add_position(::flatbuffers::Offset<foxglove::Point2> position) {
    fbb_.AddOffset(CircleAnnotation::VT_POSITION, position);
  }
  void add_diameter(double diameter) {
    fbb_.AddElement<double>(CircleAnnotation::VT_DIAMETER, diameter, 0.0);
  }
  void add_thickness(double thickness) {
    fbb_.AddElement<double>(CircleAnnotation::VT_THICKNESS, thickness, 0.0);
  }
  void add_fill_color(::flatbuffers::Offset<foxglove::Color> fill_color) {
    fbb_.AddOffset(CircleAnnotation::VT_FILL_COLOR, fill_color);
  }
  void add_outline_color(::flatbuffers::Offset<foxglove::Color> outline_color) {
    fbb_.AddOffset(CircleAnnotation::VT_OUTLINE_COLOR, outline_color);
  }
  explicit CircleAnnotationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CircleAnnotation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CircleAnnotation>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CircleAnnotation> CreateCircleAnnotation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const foxglove::Time *timestamp = nullptr,
    ::flatbuffers::Offset<foxglove::Point2> position = 0,
    double diameter = 0.0,
    double thickness = 0.0,
    ::flatbuffers::Offset<foxglove::Color> fill_color = 0,
    ::flatbuffers::Offset<foxglove::Color> outline_color = 0) {
  CircleAnnotationBuilder builder_(_fbb);
  builder_.add_thickness(thickness);
  builder_.add_diameter(diameter);
  builder_.add_outline_color(outline_color);
  builder_.add_fill_color(fill_color);
  builder_.add_position(position);
  builder_.add_timestamp(timestamp);
  return builder_.Finish();
}

inline const foxglove::CircleAnnotation *GetCircleAnnotation(const void *buf) {
  return ::flatbuffers::GetRoot<foxglove::CircleAnnotation>(buf);
}

inline const foxglove::CircleAnnotation *GetSizePrefixedCircleAnnotation(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<foxglove::CircleAnnotation>(buf);
}

inline CircleAnnotation *GetMutableCircleAnnotation(void *buf) {
  return ::flatbuffers::GetMutableRoot<CircleAnnotation>(buf);
}

inline foxglove::CircleAnnotation *GetMutableSizePrefixedCircleAnnotation(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<foxglove::CircleAnnotation>(buf);
}

inline bool VerifyCircleAnnotationBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::CircleAnnotation>(nullptr);
}

inline bool VerifySizePrefixedCircleAnnotationBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::CircleAnnotation>(nullptr);
}

inline void FinishCircleAnnotationBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::CircleAnnotation> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCircleAnnotationBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::CircleAnnotation> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_CIRCLEANNOTATION_FOXGLOVE_H_
