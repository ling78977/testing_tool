// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GRID_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_GRID_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "PackedElementField_generated.h"
#include "Pose_generated.h"
#include "Time_generated.h"
#include "Vector2_generated.h"

namespace foxglove {

struct Grid;
struct GridBuilder;

/// A 2D grid of data
struct Grid FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GridBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_FRAME_ID = 6,
    VT_POSE = 8,
    VT_COLUMN_COUNT = 10,
    VT_CELL_SIZE = 12,
    VT_ROW_STRIDE = 14,
    VT_CELL_STRIDE = 16,
    VT_FIELDS = 18,
    VT_DATA = 20
  };
  /// Timestamp of grid
  const foxglove::Time *timestamp() const {
    return GetStruct<const foxglove::Time *>(VT_TIMESTAMP);
  }
  foxglove::Time *mutable_timestamp() {
    return GetStruct<foxglove::Time *>(VT_TIMESTAMP);
  }
  /// Frame of reference
  const ::flatbuffers::String *frame_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FRAME_ID);
  }
  ::flatbuffers::String *mutable_frame_id() {
    return GetPointer<::flatbuffers::String *>(VT_FRAME_ID);
  }
  /// Origin of grid's corner relative to frame of reference; grid is positioned in the x-y plane relative to this origin
  const foxglove::Pose *pose() const {
    return GetPointer<const foxglove::Pose *>(VT_POSE);
  }
  foxglove::Pose *mutable_pose() {
    return GetPointer<foxglove::Pose *>(VT_POSE);
  }
  /// Number of grid columns
  uint32_t column_count() const {
    return GetField<uint32_t>(VT_COLUMN_COUNT, 0);
  }
  bool mutate_column_count(uint32_t _column_count = 0) {
    return SetField<uint32_t>(VT_COLUMN_COUNT, _column_count, 0);
  }
  /// Size of single grid cell along x and y axes, relative to `pose`
  const foxglove::Vector2 *cell_size() const {
    return GetPointer<const foxglove::Vector2 *>(VT_CELL_SIZE);
  }
  foxglove::Vector2 *mutable_cell_size() {
    return GetPointer<foxglove::Vector2 *>(VT_CELL_SIZE);
  }
  /// Number of bytes between rows in `data`
  uint32_t row_stride() const {
    return GetField<uint32_t>(VT_ROW_STRIDE, 0);
  }
  bool mutate_row_stride(uint32_t _row_stride = 0) {
    return SetField<uint32_t>(VT_ROW_STRIDE, _row_stride, 0);
  }
  /// Number of bytes between cells within a row in `data`
  uint32_t cell_stride() const {
    return GetField<uint32_t>(VT_CELL_STRIDE, 0);
  }
  bool mutate_cell_stride(uint32_t _cell_stride = 0) {
    return SetField<uint32_t>(VT_CELL_STRIDE, _cell_stride, 0);
  }
  /// Fields in `data`. `red`, `green`, `blue`, and `alpha` are optional for customizing the grid's color.
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::PackedElementField>> *fields() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::PackedElementField>> *>(VT_FIELDS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::PackedElementField>> *mutable_fields() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::PackedElementField>> *>(VT_FIELDS);
  }
  /// Grid cell data, interpreted using `fields`, in row-major (y-major) order
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  ::flatbuffers::Vector<uint8_t> *mutable_data() {
    return GetPointer<::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<foxglove::Time>(verifier, VT_TIMESTAMP, 4) &&
           VerifyOffset(verifier, VT_FRAME_ID) &&
           verifier.VerifyString(frame_id()) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyField<uint32_t>(verifier, VT_COLUMN_COUNT, 4) &&
           VerifyOffset(verifier, VT_CELL_SIZE) &&
           verifier.VerifyTable(cell_size()) &&
           VerifyField<uint32_t>(verifier, VT_ROW_STRIDE, 4) &&
           VerifyField<uint32_t>(verifier, VT_CELL_STRIDE, 4) &&
           VerifyOffset(verifier, VT_FIELDS) &&
           verifier.VerifyVector(fields()) &&
           verifier.VerifyVectorOfTables(fields()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct GridBuilder {
  typedef Grid Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_timestamp(const foxglove::Time *timestamp) {
    fbb_.AddStruct(Grid::VT_TIMESTAMP, timestamp);
  }
  void add_frame_id(::flatbuffers::Offset<::flatbuffers::String> frame_id) {
    fbb_.AddOffset(Grid::VT_FRAME_ID, frame_id);
  }
  void add_pose(::flatbuffers::Offset<foxglove::Pose> pose) {
    fbb_.AddOffset(Grid::VT_POSE, pose);
  }
  void add_column_count(uint32_t column_count) {
    fbb_.AddElement<uint32_t>(Grid::VT_COLUMN_COUNT, column_count, 0);
  }
  void add_cell_size(::flatbuffers::Offset<foxglove::Vector2> cell_size) {
    fbb_.AddOffset(Grid::VT_CELL_SIZE, cell_size);
  }
  void add_row_stride(uint32_t row_stride) {
    fbb_.AddElement<uint32_t>(Grid::VT_ROW_STRIDE, row_stride, 0);
  }
  void add_cell_stride(uint32_t cell_stride) {
    fbb_.AddElement<uint32_t>(Grid::VT_CELL_STRIDE, cell_stride, 0);
  }
  void add_fields(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::PackedElementField>>> fields) {
    fbb_.AddOffset(Grid::VT_FIELDS, fields);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Grid::VT_DATA, data);
  }
  explicit GridBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Grid> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Grid>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Grid> CreateGrid(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const foxglove::Time *timestamp = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> frame_id = 0,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    uint32_t column_count = 0,
    ::flatbuffers::Offset<foxglove::Vector2> cell_size = 0,
    uint32_t row_stride = 0,
    uint32_t cell_stride = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::PackedElementField>>> fields = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  GridBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_fields(fields);
  builder_.add_cell_stride(cell_stride);
  builder_.add_row_stride(row_stride);
  builder_.add_cell_size(cell_size);
  builder_.add_column_count(column_count);
  builder_.add_pose(pose);
  builder_.add_frame_id(frame_id);
  builder_.add_timestamp(timestamp);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Grid> CreateGridDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const foxglove::Time *timestamp = nullptr,
    const char *frame_id = nullptr,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    uint32_t column_count = 0,
    ::flatbuffers::Offset<foxglove::Vector2> cell_size = 0,
    uint32_t row_stride = 0,
    uint32_t cell_stride = 0,
    const std::vector<::flatbuffers::Offset<foxglove::PackedElementField>> *fields = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  auto frame_id__ = frame_id ? _fbb.CreateString(frame_id) : 0;
  auto fields__ = fields ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::PackedElementField>>(*fields) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return foxglove::CreateGrid(
      _fbb,
      timestamp,
      frame_id__,
      pose,
      column_count,
      cell_size,
      row_stride,
      cell_stride,
      fields__,
      data__);
}

inline const foxglove::Grid *GetGrid(const void *buf) {
  return ::flatbuffers::GetRoot<foxglove::Grid>(buf);
}

inline const foxglove::Grid *GetSizePrefixedGrid(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<foxglove::Grid>(buf);
}

inline Grid *GetMutableGrid(void *buf) {
  return ::flatbuffers::GetMutableRoot<Grid>(buf);
}

inline foxglove::Grid *GetMutableSizePrefixedGrid(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<foxglove::Grid>(buf);
}

inline bool VerifyGridBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::Grid>(nullptr);
}

inline bool VerifySizePrefixedGridBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::Grid>(nullptr);
}

inline void FinishGridBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::Grid> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGridBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::Grid> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_GRID_FOXGLOVE_H_
