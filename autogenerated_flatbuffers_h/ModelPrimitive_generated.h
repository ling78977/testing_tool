// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MODELPRIMITIVE_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_MODELPRIMITIVE_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "Color_generated.h"
#include "Pose_generated.h"
#include "Vector3_generated.h"

namespace foxglove {

struct ModelPrimitive;
struct ModelPrimitiveBuilder;

/// A primitive representing a 3D model file loaded from an external URL or embedded data
struct ModelPrimitive FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ModelPrimitiveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSE = 4,
    VT_SCALE = 6,
    VT_COLOR = 8,
    VT_OVERRIDE_COLOR = 10,
    VT_URL = 12,
    VT_MEDIA_TYPE = 14,
    VT_DATA = 16
  };
  /// Origin of model relative to reference frame
  const foxglove::Pose *pose() const {
    return GetPointer<const foxglove::Pose *>(VT_POSE);
  }
  foxglove::Pose *mutable_pose() {
    return GetPointer<foxglove::Pose *>(VT_POSE);
  }
  /// Scale factor to apply to the model along each axis
  const foxglove::Vector3 *scale() const {
    return GetPointer<const foxglove::Vector3 *>(VT_SCALE);
  }
  foxglove::Vector3 *mutable_scale() {
    return GetPointer<foxglove::Vector3 *>(VT_SCALE);
  }
  /// Solid color to use for the whole model if `override_color` is true.
  const foxglove::Color *color() const {
    return GetPointer<const foxglove::Color *>(VT_COLOR);
  }
  foxglove::Color *mutable_color() {
    return GetPointer<foxglove::Color *>(VT_COLOR);
  }
  /// Whether to use the color specified in `color` instead of any materials embedded in the original model.
  bool override_color() const {
    return GetField<uint8_t>(VT_OVERRIDE_COLOR, 0) != 0;
  }
  bool mutate_override_color(bool _override_color = 0) {
    return SetField<uint8_t>(VT_OVERRIDE_COLOR, static_cast<uint8_t>(_override_color), 0);
  }
  /// URL pointing to model file. One of `url` or `data` should be provided.
  const ::flatbuffers::String *url() const {
    return GetPointer<const ::flatbuffers::String *>(VT_URL);
  }
  ::flatbuffers::String *mutable_url() {
    return GetPointer<::flatbuffers::String *>(VT_URL);
  }
  /// [Media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of embedded model (e.g. `model/gltf-binary`). Required if `data` is provided instead of `url`. Overrides the inferred media type if `url` is provided.
  const ::flatbuffers::String *media_type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MEDIA_TYPE);
  }
  ::flatbuffers::String *mutable_media_type() {
    return GetPointer<::flatbuffers::String *>(VT_MEDIA_TYPE);
  }
  /// Embedded model. One of `url` or `data` should be provided. If `data` is provided, `media_type` must be set to indicate the type of the data.
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  ::flatbuffers::Vector<uint8_t> *mutable_data() {
    return GetPointer<::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSE) &&
           verifier.VerifyTable(pose()) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyTable(scale()) &&
           VerifyOffset(verifier, VT_COLOR) &&
           verifier.VerifyTable(color()) &&
           VerifyField<uint8_t>(verifier, VT_OVERRIDE_COLOR, 1) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.VerifyString(url()) &&
           VerifyOffset(verifier, VT_MEDIA_TYPE) &&
           verifier.VerifyString(media_type()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct ModelPrimitiveBuilder {
  typedef ModelPrimitive Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pose(::flatbuffers::Offset<foxglove::Pose> pose) {
    fbb_.AddOffset(ModelPrimitive::VT_POSE, pose);
  }
  void add_scale(::flatbuffers::Offset<foxglove::Vector3> scale) {
    fbb_.AddOffset(ModelPrimitive::VT_SCALE, scale);
  }
  void add_color(::flatbuffers::Offset<foxglove::Color> color) {
    fbb_.AddOffset(ModelPrimitive::VT_COLOR, color);
  }
  void add_override_color(bool override_color) {
    fbb_.AddElement<uint8_t>(ModelPrimitive::VT_OVERRIDE_COLOR, static_cast<uint8_t>(override_color), 0);
  }
  void add_url(::flatbuffers::Offset<::flatbuffers::String> url) {
    fbb_.AddOffset(ModelPrimitive::VT_URL, url);
  }
  void add_media_type(::flatbuffers::Offset<::flatbuffers::String> media_type) {
    fbb_.AddOffset(ModelPrimitive::VT_MEDIA_TYPE, media_type);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(ModelPrimitive::VT_DATA, data);
  }
  explicit ModelPrimitiveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ModelPrimitive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ModelPrimitive>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ModelPrimitive> CreateModelPrimitive(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    ::flatbuffers::Offset<foxglove::Vector3> scale = 0,
    ::flatbuffers::Offset<foxglove::Color> color = 0,
    bool override_color = false,
    ::flatbuffers::Offset<::flatbuffers::String> url = 0,
    ::flatbuffers::Offset<::flatbuffers::String> media_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  ModelPrimitiveBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_media_type(media_type);
  builder_.add_url(url);
  builder_.add_color(color);
  builder_.add_scale(scale);
  builder_.add_pose(pose);
  builder_.add_override_color(override_color);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ModelPrimitive> CreateModelPrimitiveDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<foxglove::Pose> pose = 0,
    ::flatbuffers::Offset<foxglove::Vector3> scale = 0,
    ::flatbuffers::Offset<foxglove::Color> color = 0,
    bool override_color = false,
    const char *url = nullptr,
    const char *media_type = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  auto url__ = url ? _fbb.CreateString(url) : 0;
  auto media_type__ = media_type ? _fbb.CreateString(media_type) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return foxglove::CreateModelPrimitive(
      _fbb,
      pose,
      scale,
      color,
      override_color,
      url__,
      media_type__,
      data__);
}

inline const foxglove::ModelPrimitive *GetModelPrimitive(const void *buf) {
  return ::flatbuffers::GetRoot<foxglove::ModelPrimitive>(buf);
}

inline const foxglove::ModelPrimitive *GetSizePrefixedModelPrimitive(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<foxglove::ModelPrimitive>(buf);
}

inline ModelPrimitive *GetMutableModelPrimitive(void *buf) {
  return ::flatbuffers::GetMutableRoot<ModelPrimitive>(buf);
}

inline foxglove::ModelPrimitive *GetMutableSizePrefixedModelPrimitive(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<foxglove::ModelPrimitive>(buf);
}

inline bool VerifyModelPrimitiveBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::ModelPrimitive>(nullptr);
}

inline bool VerifySizePrefixedModelPrimitiveBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::ModelPrimitive>(nullptr);
}

inline void FinishModelPrimitiveBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::ModelPrimitive> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedModelPrimitiveBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::ModelPrimitive> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_MODELPRIMITIVE_FOXGLOVE_H_
