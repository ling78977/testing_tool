// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENEENTITY_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_SCENEENTITY_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "ArrowPrimitive_generated.h"
#include "CubePrimitive_generated.h"
#include "CylinderPrimitive_generated.h"
#include "Duration_generated.h"
#include "KeyValuePair_generated.h"
#include "LinePrimitive_generated.h"
#include "ModelPrimitive_generated.h"
#include "SpherePrimitive_generated.h"
#include "TextPrimitive_generated.h"
#include "Time_generated.h"
#include "TriangleListPrimitive_generated.h"

namespace foxglove {

struct SceneEntity;
struct SceneEntityBuilder;

/// A visual element in a 3D scene. An entity may be composed of multiple primitives which all share the same frame of reference.
struct SceneEntity FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SceneEntityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_FRAME_ID = 6,
    VT_ID = 8,
    VT_LIFETIME = 10,
    VT_FRAME_LOCKED = 12,
    VT_METADATA = 14,
    VT_ARROWS = 16,
    VT_CUBES = 18,
    VT_SPHERES = 20,
    VT_CYLINDERS = 22,
    VT_LINES = 24,
    VT_TRIANGLES = 26,
    VT_TEXTS = 28,
    VT_MODELS = 30
  };
  /// Timestamp of the entity
  const foxglove::Time *timestamp() const {
    return GetStruct<const foxglove::Time *>(VT_TIMESTAMP);
  }
  foxglove::Time *mutable_timestamp() {
    return GetStruct<foxglove::Time *>(VT_TIMESTAMP);
  }
  /// Frame of reference
  const ::flatbuffers::String *frame_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FRAME_ID);
  }
  ::flatbuffers::String *mutable_frame_id() {
    return GetPointer<::flatbuffers::String *>(VT_FRAME_ID);
  }
  /// Identifier for the entity. A entity will replace any prior entity on the same topic with the same `id`.
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  ::flatbuffers::String *mutable_id() {
    return GetPointer<::flatbuffers::String *>(VT_ID);
  }
  /// Length of time (relative to `timestamp`) after which the entity should be automatically removed. Zero value indicates the entity should remain visible until it is replaced or deleted.
  const foxglove::Duration *lifetime() const {
    return GetStruct<const foxglove::Duration *>(VT_LIFETIME);
  }
  foxglove::Duration *mutable_lifetime() {
    return GetStruct<foxglove::Duration *>(VT_LIFETIME);
  }
  /// Whether the entity should keep its location in the fixed frame (false) or follow the frame specified in `frame_id` as it moves relative to the fixed frame (true)
  bool frame_locked() const {
    return GetField<uint8_t>(VT_FRAME_LOCKED, 0) != 0;
  }
  bool mutate_frame_locked(bool _frame_locked = 0) {
    return SetField<uint8_t>(VT_FRAME_LOCKED, static_cast<uint8_t>(_frame_locked), 0);
  }
  /// Additional user-provided metadata associated with the entity. Keys must be unique.
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::KeyValuePair>> *metadata() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::KeyValuePair>> *>(VT_METADATA);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::KeyValuePair>> *mutable_metadata() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::KeyValuePair>> *>(VT_METADATA);
  }
  /// Arrow primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ArrowPrimitive>> *arrows() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ArrowPrimitive>> *>(VT_ARROWS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ArrowPrimitive>> *mutable_arrows() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ArrowPrimitive>> *>(VT_ARROWS);
  }
  /// Cube primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CubePrimitive>> *cubes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CubePrimitive>> *>(VT_CUBES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CubePrimitive>> *mutable_cubes() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CubePrimitive>> *>(VT_CUBES);
  }
  /// Sphere primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::SpherePrimitive>> *spheres() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::SpherePrimitive>> *>(VT_SPHERES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::SpherePrimitive>> *mutable_spheres() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::SpherePrimitive>> *>(VT_SPHERES);
  }
  /// Cylinder primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CylinderPrimitive>> *cylinders() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CylinderPrimitive>> *>(VT_CYLINDERS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CylinderPrimitive>> *mutable_cylinders() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CylinderPrimitive>> *>(VT_CYLINDERS);
  }
  /// Line primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::LinePrimitive>> *lines() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::LinePrimitive>> *>(VT_LINES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::LinePrimitive>> *mutable_lines() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::LinePrimitive>> *>(VT_LINES);
  }
  /// Triangle list primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TriangleListPrimitive>> *triangles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TriangleListPrimitive>> *>(VT_TRIANGLES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TriangleListPrimitive>> *mutable_triangles() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TriangleListPrimitive>> *>(VT_TRIANGLES);
  }
  /// Text primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TextPrimitive>> *texts() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TextPrimitive>> *>(VT_TEXTS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TextPrimitive>> *mutable_texts() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TextPrimitive>> *>(VT_TEXTS);
  }
  /// Model primitives
  const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ModelPrimitive>> *models() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ModelPrimitive>> *>(VT_MODELS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ModelPrimitive>> *mutable_models() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ModelPrimitive>> *>(VT_MODELS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<foxglove::Time>(verifier, VT_TIMESTAMP, 4) &&
           VerifyOffset(verifier, VT_FRAME_ID) &&
           verifier.VerifyString(frame_id()) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<foxglove::Duration>(verifier, VT_LIFETIME, 4) &&
           VerifyField<uint8_t>(verifier, VT_FRAME_LOCKED, 1) &&
           VerifyOffset(verifier, VT_METADATA) &&
           verifier.VerifyVector(metadata()) &&
           verifier.VerifyVectorOfTables(metadata()) &&
           VerifyOffset(verifier, VT_ARROWS) &&
           verifier.VerifyVector(arrows()) &&
           verifier.VerifyVectorOfTables(arrows()) &&
           VerifyOffset(verifier, VT_CUBES) &&
           verifier.VerifyVector(cubes()) &&
           verifier.VerifyVectorOfTables(cubes()) &&
           VerifyOffset(verifier, VT_SPHERES) &&
           verifier.VerifyVector(spheres()) &&
           verifier.VerifyVectorOfTables(spheres()) &&
           VerifyOffset(verifier, VT_CYLINDERS) &&
           verifier.VerifyVector(cylinders()) &&
           verifier.VerifyVectorOfTables(cylinders()) &&
           VerifyOffset(verifier, VT_LINES) &&
           verifier.VerifyVector(lines()) &&
           verifier.VerifyVectorOfTables(lines()) &&
           VerifyOffset(verifier, VT_TRIANGLES) &&
           verifier.VerifyVector(triangles()) &&
           verifier.VerifyVectorOfTables(triangles()) &&
           VerifyOffset(verifier, VT_TEXTS) &&
           verifier.VerifyVector(texts()) &&
           verifier.VerifyVectorOfTables(texts()) &&
           VerifyOffset(verifier, VT_MODELS) &&
           verifier.VerifyVector(models()) &&
           verifier.VerifyVectorOfTables(models()) &&
           verifier.EndTable();
  }
};

struct SceneEntityBuilder {
  typedef SceneEntity Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_timestamp(const foxglove::Time *timestamp) {
    fbb_.AddStruct(SceneEntity::VT_TIMESTAMP, timestamp);
  }
  void add_frame_id(::flatbuffers::Offset<::flatbuffers::String> frame_id) {
    fbb_.AddOffset(SceneEntity::VT_FRAME_ID, frame_id);
  }
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SceneEntity::VT_ID, id);
  }
  void add_lifetime(const foxglove::Duration *lifetime) {
    fbb_.AddStruct(SceneEntity::VT_LIFETIME, lifetime);
  }
  void add_frame_locked(bool frame_locked) {
    fbb_.AddElement<uint8_t>(SceneEntity::VT_FRAME_LOCKED, static_cast<uint8_t>(frame_locked), 0);
  }
  void add_metadata(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::KeyValuePair>>> metadata) {
    fbb_.AddOffset(SceneEntity::VT_METADATA, metadata);
  }
  void add_arrows(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ArrowPrimitive>>> arrows) {
    fbb_.AddOffset(SceneEntity::VT_ARROWS, arrows);
  }
  void add_cubes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CubePrimitive>>> cubes) {
    fbb_.AddOffset(SceneEntity::VT_CUBES, cubes);
  }
  void add_spheres(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::SpherePrimitive>>> spheres) {
    fbb_.AddOffset(SceneEntity::VT_SPHERES, spheres);
  }
  void add_cylinders(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CylinderPrimitive>>> cylinders) {
    fbb_.AddOffset(SceneEntity::VT_CYLINDERS, cylinders);
  }
  void add_lines(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::LinePrimitive>>> lines) {
    fbb_.AddOffset(SceneEntity::VT_LINES, lines);
  }
  void add_triangles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TriangleListPrimitive>>> triangles) {
    fbb_.AddOffset(SceneEntity::VT_TRIANGLES, triangles);
  }
  void add_texts(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TextPrimitive>>> texts) {
    fbb_.AddOffset(SceneEntity::VT_TEXTS, texts);
  }
  void add_models(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ModelPrimitive>>> models) {
    fbb_.AddOffset(SceneEntity::VT_MODELS, models);
  }
  explicit SceneEntityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SceneEntity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SceneEntity>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SceneEntity> CreateSceneEntity(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const foxglove::Time *timestamp = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> frame_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    const foxglove::Duration *lifetime = nullptr,
    bool frame_locked = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::KeyValuePair>>> metadata = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ArrowPrimitive>>> arrows = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CubePrimitive>>> cubes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::SpherePrimitive>>> spheres = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::CylinderPrimitive>>> cylinders = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::LinePrimitive>>> lines = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TriangleListPrimitive>>> triangles = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::TextPrimitive>>> texts = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<foxglove::ModelPrimitive>>> models = 0) {
  SceneEntityBuilder builder_(_fbb);
  builder_.add_models(models);
  builder_.add_texts(texts);
  builder_.add_triangles(triangles);
  builder_.add_lines(lines);
  builder_.add_cylinders(cylinders);
  builder_.add_spheres(spheres);
  builder_.add_cubes(cubes);
  builder_.add_arrows(arrows);
  builder_.add_metadata(metadata);
  builder_.add_lifetime(lifetime);
  builder_.add_id(id);
  builder_.add_frame_id(frame_id);
  builder_.add_timestamp(timestamp);
  builder_.add_frame_locked(frame_locked);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SceneEntity> CreateSceneEntityDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const foxglove::Time *timestamp = nullptr,
    const char *frame_id = nullptr,
    const char *id = nullptr,
    const foxglove::Duration *lifetime = nullptr,
    bool frame_locked = false,
    const std::vector<::flatbuffers::Offset<foxglove::KeyValuePair>> *metadata = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::ArrowPrimitive>> *arrows = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::CubePrimitive>> *cubes = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::SpherePrimitive>> *spheres = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::CylinderPrimitive>> *cylinders = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::LinePrimitive>> *lines = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::TriangleListPrimitive>> *triangles = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::TextPrimitive>> *texts = nullptr,
    const std::vector<::flatbuffers::Offset<foxglove::ModelPrimitive>> *models = nullptr) {
  auto frame_id__ = frame_id ? _fbb.CreateString(frame_id) : 0;
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto metadata__ = metadata ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::KeyValuePair>>(*metadata) : 0;
  auto arrows__ = arrows ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::ArrowPrimitive>>(*arrows) : 0;
  auto cubes__ = cubes ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::CubePrimitive>>(*cubes) : 0;
  auto spheres__ = spheres ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::SpherePrimitive>>(*spheres) : 0;
  auto cylinders__ = cylinders ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::CylinderPrimitive>>(*cylinders) : 0;
  auto lines__ = lines ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::LinePrimitive>>(*lines) : 0;
  auto triangles__ = triangles ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::TriangleListPrimitive>>(*triangles) : 0;
  auto texts__ = texts ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::TextPrimitive>>(*texts) : 0;
  auto models__ = models ? _fbb.CreateVector<::flatbuffers::Offset<foxglove::ModelPrimitive>>(*models) : 0;
  return foxglove::CreateSceneEntity(
      _fbb,
      timestamp,
      frame_id__,
      id__,
      lifetime,
      frame_locked,
      metadata__,
      arrows__,
      cubes__,
      spheres__,
      cylinders__,
      lines__,
      triangles__,
      texts__,
      models__);
}

inline const foxglove::SceneEntity *GetSceneEntity(const void *buf) {
  return ::flatbuffers::GetRoot<foxglove::SceneEntity>(buf);
}

inline const foxglove::SceneEntity *GetSizePrefixedSceneEntity(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<foxglove::SceneEntity>(buf);
}

inline SceneEntity *GetMutableSceneEntity(void *buf) {
  return ::flatbuffers::GetMutableRoot<SceneEntity>(buf);
}

inline foxglove::SceneEntity *GetMutableSizePrefixedSceneEntity(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<foxglove::SceneEntity>(buf);
}

inline bool VerifySceneEntityBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<foxglove::SceneEntity>(nullptr);
}

inline bool VerifySizePrefixedSceneEntityBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<foxglove::SceneEntity>(nullptr);
}

inline void FinishSceneEntityBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::SceneEntity> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSceneEntityBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<foxglove::SceneEntity> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_SCENEENTITY_FOXGLOVE_H_
