// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TIME_FOXGLOVE_H_
#define FLATBUFFERS_GENERATED_TIME_FOXGLOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace foxglove {

struct Time;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Time FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t sec_;
  uint32_t nsec_;

 public:
  Time()
      : sec_(0),
        nsec_(0) {
  }
  Time(uint32_t _sec, uint32_t _nsec)
      : sec_(::flatbuffers::EndianScalar(_sec)),
        nsec_(::flatbuffers::EndianScalar(_nsec)) {
  }
  /// Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z
  uint32_t sec() const {
    return ::flatbuffers::EndianScalar(sec_);
  }
  void mutate_sec(uint32_t _sec) {
    ::flatbuffers::WriteScalar(&sec_, _sec);
  }
  /// Nano-second fractions from 0 to 999,999,999 inclusive
  uint32_t nsec() const {
    return ::flatbuffers::EndianScalar(nsec_);
  }
  void mutate_nsec(uint32_t _nsec) {
    ::flatbuffers::WriteScalar(&nsec_, _nsec);
  }
};
FLATBUFFERS_STRUCT_END(Time, 8);

}  // namespace foxglove

#endif  // FLATBUFFERS_GENERATED_TIME_FOXGLOVE_H_
